#+TITLE: Test Isometric Tiles
* tests
#+BEGIN_SRC leisure :results Xdynamic
#jsAdd x y = do
#  j <- foreach js '(function (x, y){return x + y})'
#  j x y
#jsAdd 1 2
define
#do
#  pl <- foreach js '(function (x,y) {return x + y;})'
#  v <- pl 1 3
#  v
#+END_SRC
#+RESULTS:
: <span class="partial-application">(define)</span>

#+BEGIN_SRC coffee :results dynamic
window.L = Lounge
Leisure.getBlockNamed('tileSets')
#+END_SRC
#+RESULTS:
: [object Object]
: [object Object]
* Tiles
#+BEGIN_HTML :var map
<div class="map">
 {{#each map}}
   <div class="row {{#if_even @index}} even{{/if_even}}">
     {{#each this}}<div class="tile-sprite iso" data-letter="{{this}}" data-coords="{{@index}} {{@../index}}"></div>{{/each}}
   </div>
 {{/each}}
</div>
#+END_HTML

#+NAME: map
#+BEGIN_SRC yaml
- abcdefghijk
- lmnop
- qrstuvwxyzABCDEF
- GHIJKLMNOP
#+END_SRC

#+NAME: tileSets
#+BEGIN_SRC yaml
floor:
  codes: abcdefghijk
  offsetX: 0
  offsetY: 0
  width: 64
  height: 32
walls:
  codes: lmnopq__rstuv
  offsetX: 0
  offsetY: 125
  width: 64
  height: 128
objects:
  codes: wx
  offsetX: 0
  offsetY: 640
  width: 64
  height: 64
rocks:
  codes: yzA
  offsetX: 0
  offsetY: 704
  width: 64
  height: 128
water:
  codes: BCDEFGH
  offsetX: 0
  offsetY: 832
  width: 64
  height: 64
#+END_SRC

#+BEGIN_SRC coffee :results def
Handlebars.registerHelper 'if_even', (conditional, options)->
  if (conditional % 2) == 0 then options.fn(this) else options.inverse(this)
#+END_SRC

#+BEGIN_SRC css
.map {
  margin-top: 3em;
  width: 1024px;
  overflow: hidden;
  padding-top: 32px;
  padding-bottom: 16px;
  white-space: nowrap;
}
.row {
  height: 16px;
}
.even {
  padding-left: 32px;
}
.iso {
  display: inline-block;
  width: 64px;
  height: 32px;
}
#+END_SRC

Make sprites here. We can improve this later, putting all the sprites into on
image, etc.

#+BEGIN_SRC coffee :results defX
  Lounge.data.getFile "tiles/tileset_cave_1.png", (contents)->
    col = 0
    row = 0
    # convert image data to blob because of performance lag from ordinary data url
    # thanks to Dan Bovey
    # http://stackoverflow.com/questions/28744562/chrome-dev-tools-is-being-slow-because-im-using-dataimage-in-background-image
    byteArrays = for offset in [0...contents.length] by 512
      slice = contents.slice offset, offset + 512
      new Uint8Array (slice.charCodeAt(i) for i in [0...512])
    blob = new Blob byteArrays, type: 'image/png'
    str = """
      .tile-sprite {
        background-image: url(#{URL.createObjectURL blob});
        background-repeat: no-repeat;
      }
    """

    for v, k in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOP"
      str += """
        .tile-sprite[data-letter="#{v}"] {
          background-position: -#{col * 64}px -#{row * 32}px !important;
        }
      """
      col += 1
      if col == 16
        col = 0
        row++
    $('#tile-styles').remove()
    $(document.head).append "<style id='tile-styles'>#{str}</style>"
#+END_SRC

* Leisure code
Primitives for Leisure
#+BEGIN_SRC coffee :results def
{define, right, left, isPartial, partialCall, Monad2} = Leisure.Runtime

define 'updateTiles', (str)->
  new Monad2 (env, cont)->
    $('#tile-styles').remove()
    $(document.head).append "<style id='tile-styles'>#{resolve str}</style>"
#+END_SRC

#+BEGIN_SRC leisure :results def
do
  url <- foreach getImage 'tiles/tileset_cave_1.png'
  codes = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOP"
  updateTiles (s['.tile-sprite {\n' '  background-image: url(' url ');\n' '  background-repeat: no-repeat;\n' '}\n']) + (strCat (map (\i . do
    row = floor (i / 16)
    col = i % 16
    s[s['.tile-sprite[data-letter=' (strAt codes i) '] {\n']
      s['  background-position: -' (col * 64) 'px -' (row * 32) 'px !important;\n']
      '}\n'])
      (range 0 (strLen codes))))
#+END_SRC
