* Map
#+BEGIN_HTML :var map=formattedMap
<div class="map">
 {{#each map}}
   <div class="row {{#if_even @index}} even{{/if_even}}">
     {{#each this}}<div class="tile-sprite iso" data-code="{{this}}" data-coords="{{@index}} {{@../index}}"></div>{{/each}}
   </div>
 {{/each}}
</div>
#+END_HTML
* Map def
#+NAME: mapData
#+BEGIN_SRC yaml
- I0I0I0I0I0I0I0
- I0I0I0I0I0I0I0
- I0I0a0a0a0a0a0
- I0I0a0n0a0a0a0
- I0I0l0l1
- I0I0m0a0p0
- I0m0
- I0l0
- n3
- a0l3
- a0l3
#+END_SRC
#+NAME: formattedMap
This takes mapData and formats is for easier rendering in the map view
#+BEGIN_SRC coffee :var mapData :observe :results yaml :flowLevel 1
_.map mapData, (v)-> _.map _.chunk(v, 2), (i)-> i.join ''
#+END_SRC
#+RESULTS:
: - [I0, I0, I0, I0, I0, I0, I0]
: - [I0, I0, I0, I0, I0, I0, I0]
: - [I0, I0, a0, a0, a0, a0, a0]
: - [I0, I0, a0, n0, a0, a0, a0]
: - [I0, I0, l0, l1]
: - [a0, a0, m0, a0, p0]
: - [I0, m0]
: - [I0, l0]
: - [n3]
: - [a0, l3]
: - [a0, l3]
* Map Tile Styles
#+BEGIN_SRC leisure :results def
buildStyles data = strCat (map (\i . do
  t = tail i
  codes = ((assoc 'codes' t) id '')
  offsetX = ((assoc 'offsetX' t) id 0)
  topPos = ((assoc 'offsetY' t) id 0)
  widthOfCurrent = ((assoc 'width' t) id 0)
  strCat (map (\j . do
    c = strAt codes j
    not c == '_'
    strCat (map (\k . do
      leftPos = offsetX + widthOfCurrent * k + (j % 4) * 4 * widthOfCurrent
      s[s['.tile-sprite[data-code="' c k '"] {\n']
        s['  background-position: -' leftPos 'px -' topPos + (floor j / 4) * ((assoc 'height' t) id 0) 'px !important;\n']
        s['  height: ' ((assoc 'height' t) id 0) 'px;\n']
        s['  top: ' (32 - ((assoc 'height' t) id 0)) 'px;\n']
        s['  width: ' widthOfCurrent 'px;\n']
        s['}\n']])
      (range 0 4)))
    (range 0 (strLen codes))))
  data)
#+END_SRC

#+BEGIN_SRC leisure :results def
  changeData
    bgndUrl <- foreach getImage 'tiles/backgroundFloorTile.png'
    updateStyles 'map-styles' s['.map {\n'
      s['  background: url(' bgndUrl ');\n']
      '}\n']
#+END_SRC

#+BEGIN_SRC leisure :results def
changeData
  url <- foreach getImage 'tiles/tileset_cave_1.png'
  data <- foreach getData 'tileSets'
  updateStyles 'tile-styles' s['.tile-sprite {\n'
    s['  background-image: url(' url ');\n']
    '  background-repeat: no-repeat;\n'
    '  position: relative;\n'
    '  vertical-align: top;\n'
    '}\n'
    buildStyles data]
#+END_SRC

#+TITLE: Test Isometric Tiles
* tests
#+BEGIN_SRC leisure :results dynamic
handleListFuncMacro name numVars expr = do
  vars = take numVars expr
  r = drop numVars expr
  list = head r
  rest = tail r
  print s['vars ' vars]
  print s['list ' list]
  print s['rest ' rest]
  []
  [name ['\\' | (append vars ['.' | (handleDo rest false id)])] list]

defMacro 'doMap' \expr . handleListFuncMacro 'map' 1 expr

simplify 'doMap i [1 2 3 4] (i + 1)'
doMap i [1 2 3 4 5] (i + 1)
#doMap i [1 2 3 4 5]
#  print i
#
#3
#map (\i . (+ i 1)) [1 2 3 4]
#+END_SRC
* Tiles
#+BEGIN_SRC coffee :results def
Handlebars.registerHelper 'stringChunk', (string, chunkSize)->
  el.join '' for el in _.chunk(string, chunkSize)
backwardsTiles = "l2l3m2m3"
Handlebars.registerHelper 'tiles', (string)->
  {name: el, } for el in _.chunk(string, 2)
#+END_SRC

#+NAME: tileSets
#+BEGIN_SRC yaml
floor:
  codes: abcdefghijk
  offsetX: 0
  offsetY: 0
  width: 64
  height: 32
walls:
  codes: lmnopq__rstuv
  offsetX: 0
  offsetY: 125
  width: 64
  height: 128
objects:
  codes: wx
  offsetX: 0
  offsetY: 640
  width: 64
  height: 64
rocks:
  codes: yzA
  offsetX: 0
  offsetY: 704
  width: 64
  height: 128
water:
  codes: BCDEFGH
  offsetX: 0
  offsetY: 832
  width: 64
  height: 64
black:
  codes: I
  offsetX: 768
  offsetY: 906
  width: 64
  height: 32
#+END_SRC

#+BEGIN_SRC coffee :results def
Handlebars.registerHelper 'if_even', (conditional, options)->
  if (conditional % 2) == 0 then options.fn(this) else options.inverse(this)
#+END_SRC

#+BEGIN_SRC css
.map {
  margin-top: 3em;
  width: 1024px;
  overflow: hidden;
  padding-top: 32px;
  padding-bottom: 16px;
  white-space: nowrap;
}
.row {
  height: 16px;
}
.even {
  padding-left: 32px;
}
.iso {
  display: inline-block;
  width: 64px;
  height: 32px;
}
.tile-sprite[data-code=zz] {
  background: black;
}
#+END_SRC
* Leisure code
** Primitives for Leisure
#+BEGIN_SRC coffee :results def
{define, right, left, isPartial, partialCall, Monad2} = Leisure.Runtime

define 'updateStyles', (id, str)->
  new Monad2 (env, cont)->
    $("##{rz id}").remove()
    $(document.head).append "<style id='#{rz id}'>#{resolve str}</style>"
#+END_SRC
